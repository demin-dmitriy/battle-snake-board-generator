{"version":3,"sources":["components/CellComponent/CellComponent.tsx","components/board.tsx","components/TitledContainer/TitledContainer.tsx","components/StyledInput/StyledInput.tsx","shared/utils.tsx","components/StyledButton/StyledButton.tsx","components/CenteredRow/CenteredRow.tsx","components/BoardControls/BoardControls.tsx","components/TestSnake/TestSnake.tsx","components/ColourSquare/ColourSquare.tsx","components/FoodControl/FoodControl.tsx","components/SnakeControl/SnakeControl.tsx","components/YouControl/YouControl.tsx","components/OtherSnakesControl/OtherSnakesControl.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CellComponent","_ref","colour","onChange","isHead","isHazard","react_default","a","createElement","className","style","backgroundColor","onClick","Board","boardState","marginTop","generateBoard","map","column","index","key","display","element","output","boardWithSnakes","board","snakes","concat","you","forEach","snake","body","segment","x","y","name","id","height","push","_loop","_loop2","undefined","hazards","find","p","snakePiece","food","some","CellComponent_CellComponent_CellComponent","_onChange","apply","this","arguments","toString","_onChange2","_onChange3","width","TitledContainer","title","children","StyledInput","props","Object","assign","type","generateColour","Math","round","random","onChangeNumberLimitFactory","target","max","length","min","event","value","test","parseInt","onBlurSetMinimumFactory","generateId","floor","StyledButton","href","tabIndex","CenteredRow","objectSpread","alignItems","marginBottom","flexWrap","BoardControls","_React$Component","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","boardCopyInput","copyBoardState","select","document","execCommand","uploadBoardState","boardUploadString","state","uploadBoard","loadBoardState","_this$state","url_or_gameid","frame","loadBoard","setBoardString","setState","setUrlOrGameId","setFrame","inherits","createClass","_this2","_this$props","changeHeight","changeWidth","boardString","JSON","stringify","TitledContainer_TitledContainer_TitledContainer","CenteredRow_CenteredRow","StyledInput_StyledInput_StyledInput","onBlur","placeholder","StyledButton_StyledButton_StyledButton","ref","readOnly","position","top","encodeURIComponent","download","game","React","Component","TestSnake","sendBoard","url","fetch","method","headers","then","res","json","move","response","catch","e","console","log","window","addEventListener","tagName","_this3","ColourSquare","FoodControl","selectFood","foodCount","ColourSquare_ColourSquare_ColourSquare","SnakeControl","health","selectSnake","changeHealth","YouControl","selectYou","SnakeControl_SnakeControl_SnakeControl","OtherSnakesControl","addSnake","changeSnakeHealth","minHeight","flexDirection","margin","_selectSnake","App","findExistingCell","findIndex","item","checkIfCellConnected","abs","selectCell","_this$state2","mode","chosenId","existingIndex","foundId","splice","matchingSnake","unshift","buildBoardState","ruleset","version","timeout","turn","head","latency","shout","targetSnakeId","_this$state3","targetSnake","changeBoardHeight","changeBoardWidth","uploadedState","parse","filter","alert","_this$state4","YouControl_YouControl","OtherSnakesControl_OtherSnakesControl","FoodControl_FoodControl","BoardControls_BoardControls","TestSnake_TestSnake","marginLeft","board_Board","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mXAWaA,eAAkC,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,OAAQC,EAAXF,EAAWE,SAAUC,EAArBH,EAAqBG,OAAQC,EAA7BJ,EAA6BI,SAA7B,OAC7CC,EAAAC,EAAAC,cAAA,UACEC,UAAU,OACVC,MAAO,CAAEC,gBAAiBT,IAAkBG,EAAW,UAAY,YACnEO,QAAST,GAETG,EAAAC,EAAAC,cAAA,YAAOJ,GAAU,QCPRS,EAAQ,SAAAZ,GAAA,IAAGa,EAAHb,EAAGa,WAAYX,EAAfF,EAAeE,SAAf,OACnBG,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACK,UAAW,KACrBC,EAAcF,EAAYX,GAAUc,IAAI,SAACC,EAAQC,GAAT,OAAmBb,EAAAC,EAAAC,cAAA,OAAKY,IAAKD,EAAOT,MAAO,CAACW,QAAS,SAAUH,EAAOD,IAAI,SAAAK,GAAO,OAAIA,SAI5HN,EAAgB,SAACF,EAAyBX,GAC9C,IAAMoB,EAA0B,GAC1BC,EAIE,GACRV,EAAWW,MAAMC,OAAOC,OAAOb,EAAWc,KAAKC,QAAQ,SAAAC,GACrDA,EAAMC,KAAKF,QAAQ,SAACG,EAASb,GACtBK,EAAgBQ,EAAQC,KAC3BT,EAAgBQ,EAAQC,GAAK,IAE/BT,EAAgBQ,EAAQC,GAAGD,EAAQE,GAAK,CACtChC,OAAQ4B,EAAMK,KACdC,GAAIN,EAAMM,GACVhC,OAAkB,IAAVe,OAKd,IAAK,IAAIe,EAAIpB,EAAWW,MAAMY,OAAQ,EAAIH,GAAK,EAAIA,IACjDX,EAAOe,KAAK,IAGd,IAxBuG,IAAAC,EAAA,SAwB9FL,GAEP,IA1BqG,IAAAM,EAAA,SA0B5FP,GACP,IAAI5B,OAAoFoC,IAAhE3B,EAAWW,MAAMiB,QAAQC,KAAM,SAACC,GAAD,OAAOA,EAAEX,GAAKA,GAAKW,EAAEV,GAAKA,IAC7EW,EAIYrB,EAAgBS,IAAMT,EAAgBS,GAAGC,GAAKV,EAAgBS,GAAGC,QAAKO,EAEtF,GAAI3B,EAAWW,MAAMqB,KAAKC,KAAK,SAAAD,GAAI,OAAIA,EAAKb,IAAMA,GAAKa,EAAKZ,IAAMA,IAChEX,EAAOT,EAAWW,MAAMY,OAAQ,EAAIH,GAAGI,KAAKhC,EAAAC,EAAAC,cAACwC,EAAD,CAAe5B,IAAG,GAAAO,OAAKM,EAAL,KAAAN,OAAUb,EAAWW,MAAMY,OAAQ,EAAIH,GAAKhC,OAAO,SAASC,SAAQ,SAAA8C,GAAA,SAAA9C,IAAA,OAAA8C,EAAAC,MAAAC,KAAAC,WAAA,OAAAjD,EAAAkD,SAAA,kBAAAJ,EAAAI,YAAAlD,EAAA,CAAE,kBAAMA,EAAS8B,EAAGC,EAAG,kBACpJ,QAAmBO,IAAfI,EAA0B,CACnC,IAAIT,EAAaS,EAAWT,GAC5Bb,EAAOT,EAAWW,MAAMY,OAAQ,EAAIH,GAAGI,KAAKhC,EAAAC,EAAAC,cAACwC,EAAD,CAAe5B,IAAG,GAAAO,OAAKM,EAAL,KAAAN,OAAUb,EAAWW,MAAMY,OAAQ,EAAIH,GAAKhC,OAAQ2C,EAAW3C,OAAQE,OAAQyC,EAAWzC,OAAQC,SAAWA,EAAWF,SAAQ,SAAAmD,GAAA,SAAAnD,IAAA,OAAAmD,EAAAJ,MAAAC,KAAAC,WAAA,OAAAjD,EAAAkD,SAAA,kBAAAC,EAAAD,YAAAlD,EAAA,CAAE,kBAAMA,EAAS8B,EAAIC,EAAGE,aAEtNb,EAAOT,EAAWW,MAAMY,OAAQ,EAAGH,GAAGI,KAAKhC,EAAAC,EAAAC,cAACwC,EAAD,CAAe5B,IAAG,GAAAO,OAAKM,EAAL,KAAAN,OAAUb,EAAWW,MAAMY,OAAQ,EAAIH,GAAK7B,SAAWA,EAAWF,SAAQ,SAAAoD,GAAA,SAAApD,IAAA,OAAAoD,EAAAL,MAAAC,KAAAC,WAAA,OAAAjD,EAAAkD,SAAA,kBAAAE,EAAAF,YAAAlD,EAAA,CAAE,kBAAMA,EAAS8B,EAAIC,EAAG,UAd1JD,EAAI,EAAGA,EAAInB,EAAWW,MAAM+B,MAAOvB,IAAKO,EAAxCP,IAFFC,EAAIpB,EAAWW,MAAMY,OAAQ,EAAIH,GAAK,EAAIA,IAAKK,EAA/CL,GAoBT,OAAOX,GCrDIkC,SAA+C,SAAAxD,GAAyB,IAAtByD,EAAsBzD,EAAtByD,MAAOC,EAAe1D,EAAf0D,SACpE,OACErD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAmBiD,GAC/BC,MCTIC,SAAiH,SAAAC,GAC5H,OAAOvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACnBoD,EAAMH,OAASpD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeoD,EAAMH,MAArC,KAChBpD,EAAAC,EAAAC,cAAA,QAAAsD,OAAAC,OAAA,CAAOC,KAAK,QAAWH,OCJdI,EAA+B,WAE1C,MAAO,MAAQC,KAAKC,MADV,MACgBD,KAAKE,UAAgBf,SAAS,KAG7CgB,EAA6B,SAACC,GAAuE,IAAxCC,EAAwCnB,UAAAoB,OAAA,QAAA/B,IAAAW,UAAA,GAAAA,UAAA,GAA1B,IAAMqB,EAAoBrB,UAAAoB,OAAA,QAAA/B,IAAAW,UAAA,GAAAA,UAAA,GAAN,EAC1G,OAAO,SAACsB,GACN,IAAIC,EAAQD,EAAMJ,OAAOK,MAErB,OAAOC,KAAKD,KAGZE,SAASF,EAAO,IAAMJ,IACxBI,EAAQJ,EAAIlB,YAEVwB,SAASF,EAAO,IAAMF,IACxBE,EAAQF,EAAIpB,YAEdiB,EAAOK,MAIEG,EAA0B,SAACR,GAAmD,IAApBG,EAAoBrB,UAAAoB,OAAA,QAAA/B,IAAAW,UAAA,GAAAA,UAAA,GAAN,EACnF,OAAO,SAACsB,GACN,IAAIC,EAAQD,EAAMJ,OAAOK,MAErB,OAAOC,KAAKD,MAGZE,SAASF,EAAO,IAAMF,IAAQE,KAChCA,EAAQF,EAAIpB,YAEdiB,EAAOK,MAIEI,EAAa,kBAAMb,KAAKc,MAAuB,IAAhBd,KAAKE,UAAqBf,YCnCzD4B,SAA2F,SAACpB,GACvG,OAAIA,EAAMqB,KACD5E,EAAAC,EAAAC,cAAA,IAAOqD,EACZvD,EAAAC,EAAAC,cAAA,UAAQ2E,UAAW,EAAG1E,UAAU,iBAC7BoD,EAAMF,WAIJrD,EAAAC,EAAAC,cAAA,SAAAsD,OAAAC,OAAA,CAAQtD,UAAU,iBAAoBoD,GAAQA,EAAMF,mBCTlDyB,EAAmD,SAACvB,GAAD,OAAWvD,EAAAC,EAAAC,cAAA,OAAKE,MAAKoD,OAAAuB,EAAA,EAAAvB,CAAA,CAAIzC,QAAS,OAAQiE,WAAY,SAAUvE,UAAW,MAAOwE,aAAc,MAAOC,SAAU,QAAW3B,EAAMnD,QAAUmD,EAAMF,WCsBrM8B,EAAb,SAAAC,GAIE,SAAAD,EAAY5B,GAAuB,IAAA8B,EAAA,OAAA7B,OAAA8B,EAAA,EAAA9B,CAAAX,KAAAsC,IACjCE,EAAA7B,OAAA+B,EAAA,EAAA/B,CAAAX,KAAAW,OAAAgC,EAAA,EAAAhC,CAAA2B,GAAAM,KAAA5C,KAAMU,KAHAmC,eAA0C,KAEfL,EAS5BM,eAAiB,WACjBN,EAAKK,iBAGVL,EAAKK,eAAeE,SACpBC,SAASC,YAAY,UAdYT,EAiB5BU,iBAAmB,WAAM,IACtBC,EAAsBX,EAAKY,MAA3BD,mBAERE,EADwBb,EAAK9B,MAArB2C,aACIF,IApBqBX,EAuB5Bc,eAAiB,WAAM,IAAAC,EACKf,EAAKY,MAA9BI,EADoBD,EACpBC,cAAeC,EADKF,EACLE,OAEvBC,EADsBlB,EAAK9B,MAAnBgD,WACEF,EAAeC,IA1BQjB,EA6B5BmB,eAAiB,SAACnC,GAAD,OAAmBgB,EAAKoB,SAAS,CAAET,kBAAmB3B,KA7B3CgB,EA8B5BqB,eAAiB,SAACrC,GAAD,OAAmBgB,EAAKoB,SAAS,CAAEJ,cAAehC,KA9BvCgB,EA+B5BsB,SAAW,SAACtC,GAAD,OAAmBgB,EAAKoB,SAAS,CAAEH,MAAOjC,KA7B1DgB,EAAKY,MAAQ,CACXI,cAAe,GACfL,kBAAmB,GACnBM,MAAO,IALwBjB,EAJrC,OAAA7B,OAAAoD,EAAA,EAAApD,CAAA2B,EAAAC,GAAA5B,OAAAqD,EAAA,EAAArD,CAAA2B,EAAA,EAAArE,IAAA,SAAAuD,MAAA,WAqCW,IAAAyC,EAAAjE,KAAAkE,EACuElE,KAAKU,MAA3ExB,EADDgF,EACChF,OAAQmB,EADT6D,EACS7D,MAAO8D,EADhBD,EACgBC,aAAcC,EAD9BF,EAC8BE,YAA0BzG,GADxDuG,EAC2Cb,YAD3Ca,EACwDvG,YACzD0G,EAAsBC,KAAKC,UAAU5G,GAC3C,OACER,EAAAC,EAAAC,cAACmH,EAAD,CAAiBjE,MAAM,SACrBpD,EAAAC,EAAAC,cAACoH,EAAD,KACEtH,EAAAC,EAAAC,cAACqH,EAAD,CAAanE,MAAM,SAASiB,MAAOtC,EAAQyF,OAAQhD,EAAwBwC,EAAc,GAAInH,SAAUkE,EAA2BiD,KAClIhH,EAAAC,EAAAC,cAACqH,EAAD,CAAanE,MAAM,QAAQiB,MAAOnB,EAAOsE,OAAQhD,EAAwByC,EAAa,GAAIpH,SAAUkE,EAA2BkD,MAEjIjH,EAAAC,EAAAC,cAACoH,EAAD,KACEtH,EAAAC,EAAAC,cAACqH,EAAD,CAAaE,YAAY,wBAAwB5H,SAAU,SAAAuE,GAAK,OAAI0C,EAAKN,eAAepC,EAAMJ,OAAOK,UACrGrE,EAAAC,EAAAC,cAACwH,EAAD,CAAcpH,QAASuC,KAAKkD,kBAA5B,WAEF/F,EAAAC,EAAAC,cAACoH,EAAD,KACEtH,EAAAC,EAAAC,cAACqH,EAAD,CAAaE,YAAY,4BAA4B5H,SAAU,SAAAuE,GAAK,OAAI0C,EAAKJ,eAAetC,EAAMJ,OAAOK,UACzGrE,EAAAC,EAAAC,cAACqH,EAAD,CAAanE,MAAM,QAAQvD,SAAU,SAAAuE,GAAK,OAAI0C,EAAKH,SAASvC,EAAMJ,OAAOK,UACzErE,EAAAC,EAAAC,cAACwH,EAAD,CAAcpH,QAASuC,KAAKsD,gBAA5B,SAEFnG,EAAAC,EAAAC,cAACoH,EAAD,KACEtH,EAAAC,EAAAC,cAACwH,EAAD,CAAcpH,QAASuC,KAAK8C,gBAA5B,oBACA3F,EAAAC,EAAAC,cAAA,SAAO2E,UAAW,EAAG8C,IAAK,SAAAA,GAAG,OAAIb,EAAKpB,eAAiBiC,GAAKjE,KAAK,OAAOkE,UAAQ,EAACvD,MAAO6C,EAAa9G,MAAO,CAAEyH,SAAU,WAAYC,KAAM,OAC1I9H,EAAAC,EAAAC,cAACwH,EAAD,CAAc9C,KAAM,gCAAkCmD,mBAAmBb,GAAcc,SAAQ,SAAA3G,OAAWb,EAAWyH,KAAKnG,GAA3B,UAA/F,8BA1DVqD,EAAA,CAAmC+C,IAAMC,WCP5BC,EAAb,SAAAhD,GAEE,SAAAgD,EAAY7E,GAAwB,IAAA8B,EAAA,OAAA7B,OAAA8B,EAAA,EAAA9B,CAAAX,KAAAuF,IAClC/C,EAAA7B,OAAA+B,EAAA,EAAA/B,CAAAX,KAAAW,OAAAgC,EAAA,EAAAhC,CAAA4E,GAAA3C,KAAA5C,KAAMU,KAeD8E,UAAY,WAAM,IAEf7H,EAAe6E,EAAK9B,MAApB/C,WACA8H,EAAQjD,EAAKY,MAAbqC,IACRC,MAAMD,EAAK,CACT7G,KAAO0F,KAAKC,UAAU5G,GACtBgI,OAAQ,OACRC,QAAS,CACP,CAAC,eAAgB,uBAElBC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAAQF,KAAK,SAACG,GAAD,OAAsBxD,EAAKoB,SAAS,CAAEqC,SAAUD,EAAKA,SAASE,MAAM,SAAAC,GAElG,OADAC,QAAQC,IAAIF,GACLA,KAzBT3D,EAAKY,MAAQ,CACXqC,IAAK,8BAJ2BjD,EAFtC,OAAA7B,OAAAoD,EAAA,EAAApD,CAAA4E,EAAAhD,GAAA5B,OAAAqD,EAAA,EAAArD,CAAA4E,EAAA,EAAAtH,IAAA,oBAAAuD,MAAA,WAU6B,IAAAyC,EAAAjE,KACzBsG,OAAOC,iBAAiB,WAAY,SAAChF,GACjB,MAAdA,EAAMtD,KAAiBsD,EAAMJ,QAA4C,UAAjCI,EAAMJ,OAAeqF,SAC/DvC,EAAKuB,gBAbb,CAAAvH,IAAA,SAAAuD,MAAA,WAkCkB,IAAAiF,EAAAzG,KAAAuD,EAEYvD,KAAKoD,MAAvB6C,EAFM1C,EAEN0C,SAAUR,EAFJlC,EAEIkC,IAElB,OACEtI,EAAAC,EAAAC,cAACmH,EAAD,CAAiBjE,MAAM,cACrBpD,EAAAC,EAAAC,cAACoH,EAAD,KACEtH,EAAAC,EAAAC,cAACqH,EAAD,CAAanE,MAAM,MAAMiB,MAAOiE,EAAKzI,SAAU,SAAAuE,GAAK,OAAIkF,EAAK7C,SAAS,CAAE6B,IAAKlE,EAAMJ,OAAOK,WACzFyE,GAAY9I,EAAAC,EAAAC,cAAA,qBAAa4I,IAE5B9I,EAAAC,EAAAC,cAACoH,EAAD,KACEtH,EAAAC,EAAAC,cAACwH,EAAD,CAAcpH,QAASuC,KAAKwF,WAA5B,6BA7CVD,EAAA,CAA+BF,IAAMC,WCdxBoB,SAA8C,SAAA5J,GAAA,IAAGC,EAAHD,EAAGC,OAAH,OAAgBI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,MAAO,CAAEC,gBAAiBT,OCGrH4J,EAAwE,SAAA7J,GAAA,IAAE8J,EAAF9J,EAAE8J,WAAYC,EAAd/J,EAAc+J,UAAd,OAEnF1J,EAAAC,EAAAC,cAACmH,EAAD,CAAiBjE,MAAM,QACrBpD,EAAAC,EAAAC,cAACoH,EAAD,KACEtH,EAAAC,EAAAC,cAACwH,EAAD,CAAcpH,QAASmJ,GACrBzJ,EAAAC,EAAAC,cAACyJ,EAAD,CAAc/J,OAAO,YAEvBI,EAAAC,EAAAC,cAAA,2BAAmBwJ,MCEZE,SAAb,SAAAxE,GAAA,SAAAwE,IAAA,OAAApG,OAAA8B,EAAA,EAAA9B,CAAAX,KAAA+G,GAAApG,OAAA+B,EAAA,EAAA/B,CAAAX,KAAAW,OAAAgC,EAAA,EAAAhC,CAAAoG,GAAAhH,MAAAC,KAAAC,YAAA,OAAAU,OAAAoD,EAAA,EAAApD,CAAAoG,EAAAxE,GAAA5B,OAAAqD,EAAA,EAAArD,CAAAoG,EAAA,EAAA9I,IAAA,SAAAuD,MAAA,WAEW,IAAA0C,EAEsDlE,KAAKU,MAA1D3D,EAFDmH,EAECnH,OAAQiK,EAFT9C,EAES8C,OAAQC,EAFjB/C,EAEiB+C,YAAoBC,GAFrChD,EAE8B3D,MAF9B2D,EAEqCgD,cAE5C,OACE/J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAACwH,EAAD,CAAcpH,QAASwJ,GACrB9J,EAAAC,EAAAC,cAACyJ,EAAD,CAAc/J,OAAQA,KAExBI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,YAAON,GACPI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqH,EAAD,CAAanE,MAAM,SAASiB,MAAOwF,EAAQrC,OAAQhD,EAAwBuF,GAAelK,SAAUkE,EAA2BgG,EAAc,cAdzJH,EAAA,CAAkC1B,IAAMC,YCJ3B6B,EAAqC,SAAArK,GAAA,IAAGsK,EAAHtK,EAAGsK,UAAWrK,EAAdD,EAAcC,OAAQiK,EAAtBlK,EAAsBkK,OAAQE,EAA9BpK,EAA8BoK,aAA9B,OAChD/J,EAAAC,EAAAC,cAACmH,EAAD,CAAiBjE,MAAM,OACrBpD,EAAAC,EAAAC,cAACgK,EAAD,CAAcJ,YAAaG,EAAWrK,OAAQA,EAAQiK,OAAQA,EAAQE,aAAcA,MCK3EI,EAAqD,SAAAxK,GAAA,IAAEmK,EAAFnK,EAAEmK,YAAa1I,EAAfzB,EAAeyB,OAAQgJ,EAAvBzK,EAAuByK,SAAUC,EAAjC1K,EAAiC0K,kBAAjC,OAChErK,EAAAC,EAAAC,cAACmH,EAAD,CAAiBjE,MAAM,gBACrBpD,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEkK,UAAW,SACtBlJ,EAAOT,IAAI,SAAAa,GAAK,OACfxB,EAAAC,EAAAC,cAAA,OAAKY,IAAKU,EAAM5B,OAAQQ,MAAO,CAAEW,QAAS,cAAewJ,cAAe,SAAUvF,WAAY,SAAUwF,OAAQ,QAC9GxK,EAAAC,EAAAC,cAACgK,EAAD,CAAcJ,YAAW,SAAAW,GAAA,SAAAX,IAAA,OAAAW,EAAA7H,MAAAC,KAAAC,WAAA,OAAAgH,EAAA/G,SAAA,kBAAA0H,EAAA1H,YAAA+G,EAAA,CAAE,kBAAMA,EAAYtI,EAAMM,MAAKlC,OAAQ4B,EAAM5B,QAAU,GAAIiK,OAAQrI,EAAMqI,OAAQzG,MAAO5B,EAAM5B,OAAQmK,aAAc,SAAC1F,GAAD,OAAWgG,EAAkBhG,EAAO7C,EAAMM,WAI7L9B,EAAAC,EAAAC,cAACwH,EAAD,CAAcpH,QAAS8J,GAAvB,eCqTWM,cApSb,SAAAA,EAAYnH,GAAW,IAAA8B,EAAA,OAAA7B,OAAA8B,EAAA,EAAA9B,CAAAX,KAAA6H,IACrBrF,EAAA7B,OAAA+B,EAAA,EAAA/B,CAAAX,KAAAW,OAAAgC,EAAA,EAAAhC,CAAAkH,GAAAjF,KAAA5C,KAAMU,KAqBAoH,iBAAmB,SAAC7I,EAAYH,EAAWC,GAAc,IAAAwE,EACjCf,EAAKY,MAA3BzD,EADuD4D,EACvD5D,KAAMlB,EADiD8E,EACjD9E,IAAKF,EAD4CgF,EAC5ChF,OAEnB,OAAQU,GACN,IAAK,OACH,MAAO,CACLA,GAAI,OACJjB,MAAO2B,EAAKoI,UAAU,SAAAC,GAAI,OAAIA,EAAKlJ,IAAMA,GAAKkJ,EAAKjJ,IAAMA,KAE7D,IAAK,MACH,MAAO,CACLE,GAAI,MACJjB,MAAOS,EAAIG,KAAKmJ,UAAU,SAAAC,GAAI,OAAIA,EAAKlJ,IAAMA,GAAKkJ,EAAKjJ,IAAMA,KAEjE,UAAKO,EACH,OACF,QACE,IAAMX,EAAQJ,EAAOiB,KAAK,SAAAb,GAAK,OAAIA,EAAMM,KAAOA,IAChD,GAAIN,EACF,MAAO,CACLM,GAAIA,EACJjB,MAAOW,EAAMC,KAAKmJ,UAAU,SAAAC,GAAI,OAAIA,EAAKlJ,IAAMA,GAAKkJ,EAAKjJ,IAAMA,OA3ClDyD,EAiDfyF,qBAA+E,SAACnJ,EAAGC,EAAGH,GAC5F,OAAOA,EAAKgB,KAAK,SAAAf,GAAO,OAAiC,IAA5BkC,KAAKmH,IAAIrJ,EAAQC,EAAIA,IAAYD,EAAQE,IAAMA,GAAmC,IAA5BgC,KAAKmH,IAAIrJ,EAAQE,EAAIA,IAAYF,EAAQC,IAAMA,KAlD7G0D,EAqDhB2F,WAAa,SAACrJ,EAAWC,EAAWE,GAAe,IAAAmJ,EAEV5F,EAAKY,MAA3CiF,EAFgDD,EAEhDC,KAAM1I,EAF0CyI,EAE1CzI,KAAMlB,EAFoC2J,EAEpC3J,IAAKF,EAF+B6J,EAE/B7J,OAAQ+J,EAFuBF,EAEvBE,SAC7BC,EAGY/F,EAAKsF,iBAAiB7I,EAAIH,EAAGC,GAE7C,GAAIwJ,EAAe,CAEjB,IAAMC,EAAkBD,EAActJ,GAEtC,OAAQuJ,GACN,IAAK,OACH7I,EAAK8I,OAAOF,EAAcvK,MAAO,GACjC,MACF,IAAK,MACHS,EAAIG,KAAK6J,OAAOF,EAAcvK,OAC9B,MACF,QACE,IAAM0K,EAAgBnK,EAAOiB,KAAK,SAAAb,GAAK,OAAIA,EAAMM,KAAOuJ,IACpDE,GACFA,EAAc9J,KAAK6J,OAAOF,EAAcvK,QAMhD,IAAKuK,GAAkBA,EAActJ,KAAOoJ,GAAQE,EAActJ,KAAOqJ,EACvE,OAAQD,GACN,IAAK,OACH1I,EAAKR,KAAK,CAAEL,IAAGC,MACf,MACF,IAAK,OACqB,IAApBN,EAAIG,KAAKyC,QAAgBmB,EAAKyF,qBAAqBnJ,EAAGC,EAAGN,EAAIG,QAC/DH,EAAIG,KAAK+J,QAAQ,CAAE7J,IAAGC,MAExB,MACF,IAAK,QACH,IAAM2J,EAAgBnK,EAAOiB,KAAK,SAAAb,GAAK,OAAIA,EAAMM,KAAOqJ,IACxD,IAAKI,EACH,QAEgC,IAA9BA,EAAc9J,KAAKyC,QAAgBmB,EAAKyF,qBAAqBnJ,EAAGC,EAAG2J,EAAc9J,QACnF8J,EAAc9J,KAAK+J,QAAQ,CAAE7J,IAAGC,MAMxCyD,EAAKoB,SAAS,CAAEyE,OAAM1I,OAAMlB,MAAKF,SAAQ+J,cAvGpB9F,EA0GfoG,gBAAqC,WAC3C,MAAO,CACLxD,KAAM,CACJnG,GAAIuD,EAAKY,MAAMnE,GACf4J,QAAS,CACP7J,KAAM,WACN8J,QAAS,WAEXC,QAAS,KAEXC,KAAMxG,EAAKY,MAAM4F,KACjBvK,IAAK,CACHuI,OAAQtF,SAASc,EAAKY,MAAM3E,IAAIuI,OAAQ,IACxC/H,GAAI,MACJD,KAAMwD,EAAKY,MAAM3E,IAAI1B,OACrB6B,KAAM4D,EAAKY,MAAM3E,IAAIG,KACrBqK,KAAMzG,EAAKY,MAAM3E,IAAIG,KAAK,GAC1ByC,OAAQmB,EAAKY,MAAM3E,IAAIG,KAAKyC,OAC5B6H,QAAS,KACTC,MAAO,IAET7K,MAAO,CACLqB,KAAM6C,EAAKY,MAAMzD,KACjBT,OAAQwC,SAASc,EAAKY,MAAMlE,OAAQ,IACpCmB,MAAOqB,SAASc,EAAKY,MAAM/C,MAAO,IAClC9B,OAAQ,CAAC,CACPyI,OAAQtF,SAASc,EAAKY,MAAM3E,IAAIuI,OAAQ,IACxC/H,GAAI,MACJD,KAAMwD,EAAKY,MAAM3E,IAAI1B,OACrB6B,KAAM4D,EAAKY,MAAM3E,IAAIG,KACrBqK,KAAMzG,EAAKY,MAAM3E,IAAIG,KAAK,GAC1ByC,OAAQmB,EAAKY,MAAM3E,IAAIG,KAAKyC,OAC5B6H,QAAS,KACTC,MAAO,KACN3K,OAAOgE,EAAKY,MAAM7E,OAAOT,IAAI,SAAAa,GAAK,MAAK,CACxCqI,OAAQtF,SAAS/C,EAAMqI,OAAQ,IAC/B/H,GAAIN,EAAMM,GACVD,KAAML,EAAM5B,OACZ6B,KAAMD,EAAMC,KACZqK,KAAMtK,EAAMC,KAAK,GACjByC,OAAQ1C,EAAMC,KAAKyC,OACnB6H,QAAS,KACTC,MAAO,OAET5J,QAASiD,EAAKY,MAAM7D,WAtJHiD,EA2JhB+E,SAAW,WAChB,IAAMxK,EAAS+D,IACPvC,EAAWiE,EAAKY,MAAhB7E,OACRA,EAAOY,KAAK,CACVP,KAAM,GACN7B,OAAQA,EACRiK,OAAQ,MACR/H,GAAIlC,IAGNyF,EAAKoB,SAAS,CAAErF,YArKKiE,EAwKhByE,YAAc,SAAChI,GACpBuD,EAAKoB,SAAS,CACZyE,KAAM,QACNC,SAAUrJ,KA3KSuD,EA+KhBoE,WAAa,WAClBpE,EAAKoB,SAAS,CACZyE,KAAM,OACNC,SAAU,MAlLS9F,EAsLhB4E,UAAY,WACjB5E,EAAKoB,SAAS,CACZyE,KAAM,MACNC,SAAU,MAzLS9F,EA6LhBgF,kBAAoB,SAACR,EAAgBoC,GAAkC,IAAAC,EACpD7G,EAAKY,MAArB3E,EADoE4K,EACpE5K,IAAKF,EAD+D8K,EAC/D9K,OAEb,GAAsB,QAAlB6K,EAGF,OAFA3K,EAAIuI,OAASA,OACbxE,EAAKoB,SAAS,CAAEnF,QAGhB,IAAM6K,EAAc/K,EAAOiB,KAAK,SAAAb,GAAK,OAAIA,EAAMM,KAAOmK,IAClDE,IACFA,EAAYtC,OAASA,EACrBxE,EAAKoB,SAAS,CAAErF,aAxMCiE,EA6MhB+G,kBAAoB,SAACrK,GAAD,OAAoBsD,EAAKoB,SAAS,CAAE1E,YA7MxCsD,EA+MhBgH,iBAAmB,SAACnJ,GAAD,OAAmBmC,EAAKoB,SAAS,CAAEvD,WA/MtCmC,EAiNhBa,YAAc,SAAC/E,GACpB,IACE,IAAMmL,EAA6BnF,KAAKoF,MAAMpL,GAC9CkE,EAAKoB,SAAS,CACZ3E,GAAI2C,IACJ1C,OAAQuK,EAAcnL,MAAMY,OAAOgB,WACnCG,MAAOoJ,EAAcnL,MAAM+B,MAAMH,WACjC8I,KAAMS,EAAcT,KACpBrJ,KAAM8J,EAAcnL,MAAMqB,KAC1BpB,OAAQkL,EAAcnL,MAAMC,OAAOoL,OAAO,SAAAhL,GAAK,OAAIA,EAAMM,KAAOwK,EAAchL,IAAIQ,KAAInB,IAAI,SAAAa,GACxF,IAAM5B,EAAiB+D,IACvB,MAAO,CACL7B,GAAIlC,EACJA,OAAQA,EACR6B,KAAMD,EAAMC,KACZoI,OAAQrI,EAAMqI,OAAO9G,cAGzBzB,IAAK,CACH1B,OAAQ,UACR6B,KAAM6K,EAAchL,IAAIG,KACxBoI,OAAQyC,EAAchL,IAAIuI,OAAO9G,WACjCjB,GAAI,OAENoJ,KAAM,OACNC,SAAU,GACV/I,QAASkK,EAAcnL,MAAMiB,UAE/B,MAAO4G,GACPyD,MAAM,sBA9OapH,EAkPhBkB,UAAY,SAACF,EAAuBC,GACzCiC,MAAK,yBAAAlH,OAA0BgF,EAA1B,KAAAhF,OAA2CiF,GAAS,CACvDkC,OAAQ,MACRC,QAAS,CACP,CAAC,eAAgB,uBAElBC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAAQF,KAAK,SAAClI,GAAD,OAA6B6E,EAAKa,YAAYiB,KAAKC,UAAU5G,OArP7F6E,EAAKY,MAAQ,CACXnE,GAAI2C,IACJ1C,OAAQ,KACRmB,MAAO,KACP2I,KAAM,EACNrJ,KAAM,GACNpB,OAAQ,GACRE,IAAK,CACH1B,OAAQ,UACR6B,KAAM,GACNoI,OAAQ,MACR/H,GAAI,OAENoJ,KAAM,OACNC,SAAU,GACV/I,QAAS,IAlBUiD,wEA2Pd,IAAAyB,EAAAjE,KAAA6J,EAEsD7J,KAAKoD,MAA1DlE,EAFD2K,EAEC3K,OAAQmB,EAFTwJ,EAESxJ,MAAO9B,EAFhBsL,EAEgBtL,OAAQE,EAFxBoL,EAEwBpL,IAAKkB,EAF7BkK,EAE6BlK,KAAM0I,EAFnCwB,EAEmCxB,KAAMC,EAFzCuB,EAEyCvB,SAEhD,OACEnL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAACyM,EAAD,CAAY1C,UAAWpH,KAAKoH,UAAWrK,OAAQ0B,EAAI1B,OAAQiK,OAAQvI,EAAIuI,OAAQE,aAAc,SAAC1F,GAAD,OAAWyC,EAAKuD,kBAAkBhG,EAAO,UACtIrE,EAAAC,EAAAC,cAAC0M,EAAD,CAAoBxC,SAAUvH,KAAKuH,SAAUC,kBAAmBxH,KAAKwH,kBAAmBP,YAAajH,KAAKiH,YAAa1I,OAAQA,IAC/HpB,EAAAC,EAAAC,cAAC2M,EAAD,CAAanD,UAAWlH,EAAK0B,OAAQuF,WAAY5G,KAAK4G,aACtDzJ,EAAAC,EAAAC,cAAC4M,EAAD,CACEtM,WAAYqC,KAAK4I,kBACjBzE,aAAcnE,KAAKuJ,kBACnBnF,YAAapE,KAAKwJ,iBAClBtK,OAAQA,EACRmB,MAAOA,EACPgD,YAAarD,KAAKqD,YAClBK,UAAW1D,KAAK0D,YAElBvG,EAAAC,EAAAC,cAAC6M,EAAD,CAAWvM,WAAYqC,KAAK4I,qBAG9BzL,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEW,QAAS,OAAQiE,WAAY,SAAUuF,cAAe,WAClEvK,EAAAC,EAAAC,cAACmH,EAAD,CAAiBjE,MAAM,gBACrBpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACyJ,EAAD,CAAc/J,OAAiB,SAATsL,EAAkB,SAAoB,QAATA,EAAiB,UAAYC,IAChFnL,EAAAC,EAAAC,cAAA,QAAME,MAAO,CAAE4M,WAAY,KAAgB,UAAT9B,EAAmBA,EAAOC,KAGhEnL,EAAAC,EAAAC,cAAC+M,EAAD,CAAOzM,WAAYqC,KAAK4I,kBAAmB5L,SAAUgD,KAAKmI,aAC1DhL,EAAAC,EAAAC,cAACmH,EAAD,CAAiBjE,MAAM,WACrBpD,EAAAC,EAAAC,cAAA,eAASF,EAAAC,EAAAC,cAAA,2DAAkDF,EAAAC,EAAAC,cAAA,WAAlD,8DAGbF,EAAAC,EAAAC,cAAA,oBA/RUiI,aC9BE+E,QACW,cAA7B/D,OAAOgE,SAASC,UAEe,UAA7BjE,OAAOgE,SAASC,UAEhBjE,OAAOgE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvN,EAAAC,EAAAC,cAACsN,EAAD,MAAS3H,SAAS4H,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlF,KAAK,SAAAmF,GACjCA,EAAaC","file":"static/js/main.8985f20b.chunk.js","sourcesContent":["import React from \"react\";\nimport { generateColour } from \"../../shared/utils\";\nimport \"./CellComponent.css\";\n\nexport interface ICell {\n  onChange?: () => void;\n  colour?: string;\n  isHead?: boolean;\n  isHazard?: boolean;\n}\n\nexport const CellComponent: React.SFC<ICell> = ({ colour, onChange, isHead, isHazard }) => (\n  <button\n    className=\"cell\"\n    style={{ backgroundColor: colour ? colour : isHazard ? \"#a1a1a1\" : \"#d4d4d4\" }}\n    onClick={onChange}\n  >\n    <span>{isHead && \"H\"}</span>\n  </button>\n);","import React from \"react\";\nimport { IBoardState } from \"../types/IBoardState.interface\";\nimport { ISnake } from \"../types/ISnake.interface\";\nimport { CellComponent } from \"./CellComponent/CellComponent\";\n\nexport interface IBoard {\n  boardState: IBoardState,\n  onChange: (x: number, y: number, id: string) => void;\n}\n\nexport const Board = ({ boardState, onChange }: IBoard) => (\n  <div style={{marginTop: 10}}>\n    {generateBoard(boardState, onChange).map((column, index) => <div key={index} style={{display: \"flex\"}}>{column.map(element => element)}</div>)}\n  </div>\n)\n\nconst generateBoard = (boardState: IBoardState, onChange: (x: number, y: number, id: string) => void) => {\n  const output: JSX.Element[][] = [];\n  const boardWithSnakes: {\n    colour: string;\n    isHead: boolean;\n    id: string;\n  }[][] = [];\n  boardState.board.snakes.concat(boardState.you).forEach(snake => {\n    snake.body.forEach((segment, index) => {\n      if (!boardWithSnakes[segment.x]) {\n        boardWithSnakes[segment.x] = [];\n      }\n      boardWithSnakes[segment.x][segment.y] = {\n        colour: snake.name,\n        id: snake.id,\n        isHead: index === 0\n      };\n    })\n  })\n\n  for (let y = boardState.board.height -1 ; y >= 0 ; y--) {\n    output.push([]);\n  }\n\n  for (let y = boardState.board.height -1 ; y >= 0 ; y--) {\n\n    for (let x = 0; x < boardState.board.width; x++) {\n      let isHazard: boolean = boardState.board.hazards.find( (p) => p.x == x && p.y == y) !== undefined;\n      let snakePiece: {\n        colour: string;\n        isHead: boolean;\n        id: string;\n      } | undefined = boardWithSnakes[x] && boardWithSnakes[x][y] ? boardWithSnakes[x][y] : undefined;\n\n      if (boardState.board.food.some(food => food.x === x && food.y === y)) {\n        output[boardState.board.height -1 - y].push(<CellComponent key={`${x},${boardState.board.height -1 - y}`} colour=\"orange\" onChange={() => onChange(x, y, \"food\")} />)\n      } else if (snakePiece !== undefined) {\n        let id: string = snakePiece.id;\n        output[boardState.board.height -1 - y].push(<CellComponent key={`${x},${boardState.board.height -1 - y}`} colour={snakePiece.colour} isHead={snakePiece.isHead} isHazard={ isHazard } onChange={() => onChange(x,  y, id)} />)\n      } else {\n        output[boardState.board.height -1 -y].push(<CellComponent key={`${x},${boardState.board.height -1 - y}`} isHazard={ isHazard } onChange={() => onChange(x,  y, \"\")} />)\n      }\n    }\n  }\n  return output;\n}","import React from \"react\";\nimport \"./TitledContainer.css\";\n\ninterface ITitledContainer {\n  title: string;\n}\n\nexport const TitledContainer: React.SFC<ITitledContainer> = ({ title, children }) => {\n  return (\n    <div>\n      <div className=\"titled-container\">\n        <p className=\"container-title\">{title}</p>\n        {children}\n      </div>\n    </div>\n  )\n}","import React from \"react\";\nimport \"./StyledInput.css\";\n\nexport const StyledInput: React.SFC<React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>> = props => {\n  return <div className=\"styled-input\">\n    {props.title && <span className=\"input-title\">{props.title}:</span>}\n    <input type=\"text\" {...props} />\n  </div>\n}","import React from \"react\";\n\nexport const generateColour: () => string = () => {\n  var max = 0xffff;\n  return '#FF' + Math.round(Math.random() * max).toString(16);\n}\n\nexport const onChangeNumberLimitFactory = (target: (...arg: any) => void, max: number = 1000, min: number = 0) => {\n  return (event: React.ChangeEvent<HTMLInputElement>, ) => {\n    let value = event.target.value;\n\n    if (/[\\D]/.test(value)) {\n      return;\n    }\n    if (parseInt(value, 10) > max) {\n      value = max.toString();\n    }\n    if (parseInt(value, 10) < min) {\n      value = min.toString();\n    }\n    target(value);\n  }\n}\n\nexport const onBlurSetMinimumFactory = (target: (...arg: any) => void, min: number = 0) => {\n  return (event: React.FocusEvent<HTMLInputElement>, ) => {\n    let value = event.target.value;\n\n    if (/[\\D]/.test(value)) {\n      return;\n    }\n    if (parseInt(value, 10) < min || !value) {\n      value = min.toString();\n    }\n    target(value);\n  }\n}\n\nexport const generateId = () => Math.floor((Math.random() * 1000000)).toString()","import React from \"react\";\nimport \"./StyledButton.css\";\n\nexport const StyledButton: React.SFC<React.ButtonHTMLAttributes<{}> & React.AnchorHTMLAttributes<{}>> = (props) => {\n  if (props.href) {\n    return <a {...props}>\n      <button tabIndex={-1} className=\"styled-button\">\n        {props.children}\n      </button>\n    </a>\n  } else {\n    return <button className=\"styled-button\" {...props}>{props.children}</button>\n  }\n}","import React from \"react\";\n\nexport const CenteredRow: React.SFC<React.HTMLAttributes<{}>> = (props) => <div style={{ display: \"flex\", alignItems: 'center', marginTop: \"5px\", marginBottom: \"5px\", flexWrap: \"wrap\", ...props.style }}>{props.children}</div>","import React from \"react\";\nimport { StyledInput } from \"../StyledInput/StyledInput\";\nimport { onChangeNumberLimitFactory, onBlurSetMinimumFactory } from \"../../shared/utils\";\nimport { StyledButton } from \"../StyledButton/StyledButton\";\nimport { CenteredRow } from \"../CenteredRow/CenteredRow\";\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\nimport { IBoardState } from \"../../types/IBoardState.interface\";\n\nexport interface IBoardControls {\n  height: string;\n  width: string;\n  changeHeight: (value: string) => void;\n  changeWidth: (value: string) => void;\n  uploadBoard: (value: string) => void;\n  loadBoard: (url_or_gameid: string, frame: string) => void;\n  boardState: IBoardState;\n}\n\ninterface IBoardControlsState {\n  boardUploadString: string;\n  url_or_gameid: string;\n  frame: string;\n}\n\nexport class BoardControls extends React.Component<IBoardControls, IBoardControlsState> {\n\n  private boardCopyInput: HTMLInputElement | null = null;\n\n  constructor(props: IBoardControls) {\n    super(props);\n    this.state = {\n      url_or_gameid: \"\",\n      boardUploadString: \"\",\n      frame: \"\",\n    }\n  }\n\n  public copyBoardState = () => {\n    if (!this.boardCopyInput) {\n      return;\n    }\n    this.boardCopyInput.select();\n    document.execCommand(\"copy\");\n  }\n\n  public uploadBoardState = () => {\n    const { boardUploadString } = this.state;\n    const { uploadBoard } = this.props;\n    uploadBoard(boardUploadString);\n  }\n\n  public loadBoardState = () => {\n    const { url_or_gameid, frame } = this.state;\n    const { loadBoard } = this.props;\n    loadBoard(url_or_gameid, frame);\n  }\n\n  public setBoardString = (value: string) => this.setState({ boardUploadString: value });\n  public setUrlOrGameId = (value: string) => this.setState({ url_or_gameid: value });\n  public setFrame = (value: string) => this.setState({ frame: value });\n\n  render() {\n    const { height, width, changeHeight, changeWidth, uploadBoard, boardState } = this.props;\n    const boardString: string = JSON.stringify(boardState);\n    return (\n      <TitledContainer title=\"Board\">\n        <CenteredRow>\n          <StyledInput title=\"Height\" value={height} onBlur={onBlurSetMinimumFactory(changeHeight, 1)} onChange={onChangeNumberLimitFactory(changeHeight)} />\n          <StyledInput title=\"Width\" value={width} onBlur={onBlurSetMinimumFactory(changeWidth, 1)} onChange={onChangeNumberLimitFactory(changeWidth)} />\n        </CenteredRow>\n        <CenteredRow>\n          <StyledInput placeholder=\"Paste Board JSON Here\" onChange={event => this.setBoardString(event.target.value)} />\n          <StyledButton onClick={this.uploadBoardState}>Upload</StyledButton>\n        </CenteredRow>\n        <CenteredRow>\n          <StyledInput placeholder=\"Paste game URL or ID here\" onChange={event => this.setUrlOrGameId(event.target.value)} />\n          <StyledInput title=\"Frame\" onChange={event => this.setFrame(event.target.value)} />\n          <StyledButton onClick={this.loadBoardState}>Load</StyledButton>\n        </CenteredRow>\n        <CenteredRow>\n          <StyledButton onClick={this.copyBoardState}>Copy Board State</StyledButton>\n          <input tabIndex={-1} ref={ref => this.boardCopyInput = ref} type=\"text\" readOnly value={boardString} style={{ position: \"absolute\", top: -10000 }} />\n          <StyledButton href={\"data:text/json;charset=utf-8,\" + encodeURIComponent(boardString)} download={`board-${boardState.game.id}.json`}>Download Board State</StyledButton>\n        </CenteredRow>\n      </TitledContainer>\n    )\n\n  }\n}\n","import React from \"react\";\nimport { IBoardState } from \"../../types/IBoardState.interface\";\nimport { StyledButton } from \"../StyledButton/StyledButton\";\nimport { CenteredRow } from \"../CenteredRow/CenteredRow\";\nimport { StyledInput } from \"../StyledInput/StyledInput\";\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\nimport { IBoardMove } from \"../../types/IBoardMove\";\n\nexport interface ITestSnakeProps {\n  boardState: IBoardState;\n}\n\ninterface ITestSnakeState {\n  url: string;\n  response?: string;\n}\n\nexport class TestSnake extends React.Component<ITestSnakeProps, ITestSnakeState> {\n\n  constructor(props: ITestSnakeProps) {\n    super(props);\n\n    this.state = {\n      url: \"http://localhost:8000/move\"\n    }\n  }\n\n  public componentDidMount() {\n    window.addEventListener(\"keypress\", (event) => {\n      if (event.key === \" \" && (!event.target || (event.target as any).tagName !== \"INPUT\")) {\n        this.sendBoard();\n      }\n    });\n  }\n\n  public sendBoard = () => {\n\n    const { boardState } = this.props;\n    const { url } = this.state;\n    fetch(url, {\n      body:  JSON.stringify(boardState),\n      method: \"POST\",\n      headers: [\n        [\"content-type\", \"application/json\"]\n      ]\n    }).then(res => res.json()).then((move: IBoardMove) => this.setState({ response: move.move })).catch(e => {\n      console.log(e);\n      return e;\n    });;\n  }\n\n  public render() {\n\n    const { response, url } = this.state;\n\n    return (\n      <TitledContainer title=\"Test Snake\">\n        <CenteredRow>\n          <StyledInput title=\"URL\" value={url} onChange={event => this.setState({ url: event.target.value })} />\n          {response && <span>Move: {response}</span>}\n        </CenteredRow>\n        <CenteredRow>\n          <StyledButton onClick={this.sendBoard}>Send board to Snake</StyledButton>\n        </CenteredRow>\n      </TitledContainer>\n    )\n  }\n\n}\n","import React from \"react\";\nimport \"./ColourSquare.css\";\n\nexport const ColourSquare: React.SFC<{ colour: string }> = ({ colour }) => <div className=\"colour-cell\" style={{ backgroundColor: colour }} />","import React from \"react\";\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\nimport { CenteredRow } from \"../CenteredRow/CenteredRow\";\nimport { StyledButton } from \"../StyledButton/StyledButton\";\nimport { ColourSquare } from \"../ColourSquare/ColourSquare\";\n\nexport const FoodControl: React.SFC<{ selectFood: () => void, foodCount: number }> = ({selectFood, foodCount }) => (\n\n  <TitledContainer title=\"Food\">\n    <CenteredRow>\n      <StyledButton onClick={selectFood}>\n        <ColourSquare colour=\"orange\" />\n      </StyledButton>\n      <span>Food Count: {foodCount}</span>\n    </CenteredRow>\n  </TitledContainer>\n)","import React from \"react\";\nimport \"./SnakeControl.css\";\nimport { StyledInput } from \"../StyledInput/StyledInput\";\nimport { StyledButton } from \"../StyledButton/StyledButton\";\nimport { onChangeNumberLimitFactory, onBlurSetMinimumFactory } from \"../../shared/utils\";\nimport { ColourSquare } from \"../ColourSquare/ColourSquare\";\n\nexport interface ISnakeControl {\n  colour: string;\n  health: string;\n  selectSnake: () => void;\n  changeHealth: (value: string) => void;\n  title?: string;\n}\n\nexport class SnakeControl extends React.Component<ISnakeControl, {}> {\n\n  render() {\n\n    const { colour, health, selectSnake, title, changeHealth } = this.props;\n\n    return (\n      <div className=\"snake-control-container\">\n        <StyledButton onClick={selectSnake}>\n          <ColourSquare colour={colour} />\n        </StyledButton>\n        <div className=\"vertical-flex-container\">\n          <span>{colour}</span>\n          <div>\n            <StyledInput title=\"Health\" value={health} onBlur={onBlurSetMinimumFactory(changeHealth)} onChange={onChangeNumberLimitFactory(changeHealth, 100)} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport { SnakeControl } from \"../SnakeControl/SnakeControl\";\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\n\nexport interface IYouControl {\n  selectYou: () => void;\n  colour: string;\n  health: string;\n  changeHealth: (health: string) => void;\n}\n\nexport const YouControl: React.SFC<IYouControl> = ({ selectYou, colour, health, changeHealth, }) => (\n  <TitledContainer title=\"You\">\n    <SnakeControl selectSnake={selectYou} colour={colour} health={health} changeHealth={changeHealth} />\n  </TitledContainer>\n);","import React from \"react\";\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\nimport { SnakeControl } from \"../SnakeControl/SnakeControl\";\nimport { StyledButton } from \"../StyledButton/StyledButton\";\nimport { ICoordinate } from \"../../types/ICoordinate.type\";\n\nexport interface IOtherSnakesControl {\n  selectSnake: (id: string) => void;\n  snakes: {\n    id: string;\n    colour: string;\n    body: ICoordinate[];\n    health: string;\n  }[];\n  addSnake: () => void;\n  changeSnakeHealth: (value: string, target: string) => void;\n}\n\nexport const OtherSnakesControl: React.SFC<IOtherSnakesControl> = ({selectSnake, snakes, addSnake, changeSnakeHealth}) => (\n  <TitledContainer title=\"Other Snakes\">\n    <div style={{ minHeight: \"68px\" }}>\n      {snakes.map(snake =>\n        <div key={snake.colour} style={{ display: \"inline-flex\", flexDirection: \"column\", alignItems: \"center\", margin: \"5px\" }}>\n          <SnakeControl selectSnake={() => selectSnake(snake.id)} colour={snake.colour || \"\"} health={snake.health} title={snake.colour} changeHealth={(value) => changeSnakeHealth(value, snake.id)} />\n        </div>\n      )}\n    </div>\n    <StyledButton onClick={addSnake}>Add Snake</StyledButton>\n  </TitledContainer>\n)","import React, { Component, Ref } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { IBoardState } from './types/IBoardState.interface';\nimport { Board } from './components/board';\nimport { ICoordinate } from './types/ICoordinate.type';\nimport { SnakeControl } from './components/SnakeControl/SnakeControl';\nimport { IBoardMove } from './types/IBoardMove';\nimport { TitledContainer } from './components/TitledContainer/TitledContainer';\nimport { BoardControls } from './components/BoardControls/BoardControls';\nimport { StyledButton } from './components/StyledButton/StyledButton';\nimport { generateColour, generateId } from './shared/utils';\nimport { TestSnake } from './components/TestSnake/TestSnake';\nimport { CenteredRow } from './components/CenteredRow/CenteredRow';\nimport { ColourSquare } from './components/ColourSquare/ColourSquare';\nimport { FoodControl } from './components/FoodControl/FoodControl';\nimport { YouControl } from './components/YouControl/YouControl';\nimport { OtherSnakesControl } from './components/OtherSnakesControl/OtherSnakesControl';\n\ninterface IAppState {\n  id: string;\n  height: string;\n  width: string;\n  turn: number;\n  food: ICoordinate[];\n  snakes: {\n    id: string;\n    colour: string;\n    body: ICoordinate[];\n    health: string;\n  }[];\n  you: {\n    colour: string;\n    body: ICoordinate[];\n    health: string;\n    id: \"you\";\n  };\n  mode: \"food\" | \"you\" | \"snake\";\n  chosenId: string;\n  hazards: ICoordinate[];\n}\n\nclass App extends Component<{}, IAppState> {\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      id: generateId(),\n      height: \"11\",\n      width: \"11\",\n      turn: 0,\n      food: [],\n      snakes: [],\n      you: {\n        colour: \"#22aa34\",\n        body: [],\n        health: \"100\",\n        id: \"you\"\n      },\n      mode: \"food\",\n      chosenId: \"\",\n      hazards: [],\n    }\n  }\n\n  private findExistingCell = (id: string, x: number, y: number) => {\n    const { food, you, snakes } = this.state;\n\n    switch (id) {\n      case \"food\":\n        return {\n          id: \"food\",\n          index: food.findIndex(item => item.x === x && item.y === y)\n        };\n      case \"you\":\n        return {\n          id: \"you\",\n          index: you.body.findIndex(item => item.x === x && item.y === y)\n        };\n      case undefined:\n        return undefined;\n      default:\n        const snake = snakes.find(snake => snake.id === id);\n        if (snake) {\n          return {\n            id: id,\n            index: snake.body.findIndex(item => item.x === x && item.y === y)\n          };\n        }\n    }\n  }\n\n  private checkIfCellConnected: (x: number, y: number, body: ICoordinate[]) => boolean = (x, y, body) => {\n    return body.some(segment => (Math.abs(segment.x - x) === 1 && segment.y === y) || (Math.abs(segment.y - y) === 1 && segment.x === x));\n  }\n\n  public selectCell = (x: number, y: number, id: string) => {\n\n    const { mode, food, you, snakes, chosenId } = this.state;\n    let existingIndex: {\n      id: string;\n      index: number;\n    } | undefined = this.findExistingCell(id, x, y);\n\n    if (existingIndex) {\n\n      const foundId: string = existingIndex.id;\n\n      switch (foundId) {\n        case \"food\":\n          food.splice(existingIndex.index, 1);\n          break;\n        case \"you\":\n          you.body.splice(existingIndex.index);\n          break;\n        default:\n          const matchingSnake = snakes.find(snake => snake.id === foundId);\n          if (matchingSnake) {\n            matchingSnake.body.splice(existingIndex.index)\n          }\n          break;\n      }\n    }\n\n    if (!existingIndex || (existingIndex.id !== mode && existingIndex.id !== chosenId)) {\n      switch (mode) {\n        case \"food\":\n          food.push({ x, y });\n          break;\n        case \"you\":\n          if (you.body.length === 0 || this.checkIfCellConnected(x, y, you.body)) {\n            you.body.unshift({ x, y });\n          }\n          break;\n        case \"snake\":\n          const matchingSnake = snakes.find(snake => snake.id === chosenId);\n          if (!matchingSnake) {\n            return;\n          }\n          if (matchingSnake.body.length === 0 || this.checkIfCellConnected(x, y, matchingSnake.body)) {\n            matchingSnake.body.unshift({ x, y });\n          }\n          break;\n      }\n    }\n\n    this.setState({ mode, food, you, snakes, chosenId });\n  }\n\n  private buildBoardState: () => IBoardState = () => {\n    return {\n      game: {\n        id: this.state.id,\n        ruleset: {\n          name: \"standard\",\n          version: \"v.1.2.3\"\n        },\n        timeout: 500\n      },\n      turn: this.state.turn,\n      you: {\n        health: parseInt(this.state.you.health, 10),\n        id: \"you\",\n        name: this.state.you.colour,\n        body: this.state.you.body,\n        head: this.state.you.body[0],\n        length: this.state.you.body.length,\n        latency: \"20\",\n        shout: \"\",\n      },\n      board: {\n        food: this.state.food,\n        height: parseInt(this.state.height, 10),\n        width: parseInt(this.state.width, 10),\n        snakes: [{\n          health: parseInt(this.state.you.health, 10),\n          id: \"you\",\n          name: this.state.you.colour,\n          body: this.state.you.body,\n          head: this.state.you.body[0],\n          length: this.state.you.body.length,\n          latency: \"20\",\n          shout: \"\",\n        }].concat(this.state.snakes.map(snake => ({\n          health: parseInt(snake.health, 10),\n          id: snake.id,\n          name: snake.colour,\n          body: snake.body,\n          head: snake.body[0],\n          length: snake.body.length,\n          latency: \"20\",\n          shout: \"\",\n        }))),\n        hazards: this.state.hazards,\n      }\n    }\n  }\n\n  public addSnake = () => {\n    const colour = generateColour();\n    const { snakes } = this.state;\n    snakes.push({\n      body: [],\n      colour: colour,\n      health: \"100\",\n      id: colour\n    });\n\n    this.setState({ snakes })\n  }\n\n  public selectSnake = (id: string) => {\n    this.setState({\n      mode: \"snake\",\n      chosenId: id\n    });\n  }\n\n  public selectFood = () => {\n    this.setState({\n      mode: \"food\",\n      chosenId: \"\"\n    });\n  }\n\n  public selectYou = () => {\n    this.setState({\n      mode: \"you\",\n      chosenId: \"\"\n    });\n  }\n\n  public changeSnakeHealth = (health: string, targetSnakeId: \"you\" | string) => {\n    const { you, snakes } = this.state;\n\n    if (targetSnakeId === \"you\") {\n      you.health = health;\n      this.setState({ you });\n      return;\n    } else {\n      const targetSnake = snakes.find(snake => snake.id === targetSnakeId);\n      if (targetSnake) {\n        targetSnake.health = health;\n        this.setState({ snakes });\n      }\n    }\n  }\n\n  public changeBoardHeight = (height: string) => this.setState({ height });\n\n  public changeBoardWidth = (width: string) => this.setState({ width });\n\n  public uploadBoard = (board: string) => {\n    try {\n      const uploadedState: IBoardState = JSON.parse(board);\n      this.setState({\n        id: generateId(),\n        height: uploadedState.board.height.toString(),\n        width: uploadedState.board.width.toString(),\n        turn: uploadedState.turn,\n        food: uploadedState.board.food,\n        snakes: uploadedState.board.snakes.filter(snake => snake.id !== uploadedState.you.id).map(snake => {\n          const colour: string = generateColour();\n          return {\n            id: colour,\n            colour: colour,\n            body: snake.body,\n            health: snake.health.toString(),\n          }\n        }),\n        you: {\n          colour: \"#22aa34\",\n          body: uploadedState.you.body,\n          health: uploadedState.you.health.toString(),\n          id: \"you\"\n        },\n        mode: \"food\",\n        chosenId: \"\",\n        hazards: uploadedState.board.hazards,\n      });\n    } catch (e) {\n      alert(\"That didn't work\");\n    }\n  }\n\n  public loadBoard = (url_or_gameid: string, frame: string) => {\n    fetch(`http://127.0.0.1:8500/${url_or_gameid}$${frame}`, {\n      method: \"GET\",\n      headers: [\n        [\"content-type\", \"application/json\"]\n      ]\n    }).then(res => res.json()).then((boardState: IBoardState) => this.uploadBoard(JSON.stringify(boardState)));\n  }\n\n  render() {\n\n    const { height, width, snakes, you, food, mode, chosenId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"control-container\">\n          <YouControl selectYou={this.selectYou} colour={you.colour} health={you.health} changeHealth={(value) => this.changeSnakeHealth(value, \"you\")} />\n          <OtherSnakesControl addSnake={this.addSnake} changeSnakeHealth={this.changeSnakeHealth} selectSnake={this.selectSnake} snakes={snakes} />\n          <FoodControl foodCount={food.length} selectFood={this.selectFood} />\n          <BoardControls\n            boardState={this.buildBoardState()}\n            changeHeight={this.changeBoardHeight}\n            changeWidth={this.changeBoardWidth}\n            height={height}\n            width={width}\n            uploadBoard={this.uploadBoard}\n            loadBoard={this.loadBoard}\n          />\n          <TestSnake boardState={this.buildBoardState()} />\n\n        </div>\n        <div style={{ display: \"flex\", alignItems: \"center\", flexDirection: \"column\" }}>\n          <TitledContainer title=\"Current Mode\">\n            <div className=\"current-mode\">\n              <ColourSquare colour={mode === \"food\" ? \"orange\" : mode === \"you\" ? \"#22aa34\" : chosenId} />\n              <span style={{ marginLeft: 10 }}>{mode !== \"snake\" ? mode : chosenId}</span>\n            </div>\n          </TitledContainer>\n          <Board boardState={this.buildBoardState()} onChange={this.selectCell} />\n          <TitledContainer title=\"Version\">\n            <p>v1</p><p>New update: \"TestSnake\" section is now working,<br></br> be sure to enter the full url with the /move at the end</p>\n          </TitledContainer>\n        </div>\n        <div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}